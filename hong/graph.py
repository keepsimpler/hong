# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_graph.ipynb (unless otherwise specified).

__all__ = ['cascade', 'after_DAG']

# Cell
from .imports import *

# Cell
def cascade(s:int, c:float):
    p = (2 * c * s) / (s - 1)
    A = np.zeros((s,s))
    weakly_connected = False
    while not weakly_connected:
        for i in range(s-1):
            A[i,(i+1):] = np.random.binomial(size=s-i-1, n=1, p=p)
        G = nx.from_numpy_matrix(A, create_using=nx.DiGraph())
        weakly_connected = nx.is_weakly_connected(G)

    G.graph['n'] = s
    G.graph['c'] = c
    return G

# Cell

def after_DAG(G, option:str=None):
    """
    Add an unique input node and an unique output node for DAG.
    There are two options to add these two new nodes.
    First is to connect the new input node to nodes which have zero input degree in the origin DAG,
    and connect nodes which have zero output degree to the new output node.
    Second is to connect the new input node to all nodes in the origin DAG,
    and connect all node in the origin DAG to the new output node.
    """
    n = G.graph['n'] # number of nodes

    # find all input nodes and output nodes
    if option == 'all':
        in_nodes = out_nodes = range(n)
    else:
        in_nodes = [v for v, d in G.in_degree() if d==0]
        out_nodes = [v for v, d in G.out_degree() if d==0]
    # number of input nodes, number of output nodes, length of longest path
    # len(in_nodes), len(out_nodes),

    # add a node with id: -1 as the unique input node
    in_edges = [(-1,i) for i in in_nodes]
    G.add_edges_from(in_edges)
    # add a node with id: n as the unique output node
    out_edges = [(i, n) for i in out_nodes]
    G.add_edges_from(out_edges)

    return G